name: First CI/CD workflow
#### ADD things to workflow
#### 2 tyings to fix: the Static files and the Variables for allowed hosts
### Lint, Security, Secret Scanning ...etc
### attach log on Build Log failure
### JEST, OSASP BASE SCAN, FLAKE8, "is website vulnerable","GitHub Project Connect Action", "
### GitHub Project Connect Action", "Starting Selenoid Server"
### WhiteSource Unified Agent,
### you might consider this to post teh results of test Deploy to GitHub Pages - Python



on:
  push:
    branches: [ master ]
  
  #pull_request:
   # branches: [ master ]

####THese are for the Django Security Cech
env:
  ### Direct them the rather than repeating they can add here
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.6] #[3.6, 3.7, 3.8]
        language: [ 'python' ]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run Tests
      run: |
        python manage.py test

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Run flake8
      uses: julianwachholz/flake8-action@v1.1.0
      with:
        checkName: "Python Lint"
        path: "todo"

    
    #### Ensure that we've stops automatic scanning
    #### we need to define the quality gates. 
    #### build a custom Quality gate
    #### Better to introduce the sonar-project.properties.
    - name: Analyze with SonarCloud
      uses: sonarsource/sonarcloud-github-action@master
      with:
        args: >
          -Dsonar.organization=space-game-web-abuhijleh
          -Dsonar.projectKey=abuhijleh_pipeline-test
      env:
        #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


    ### SCANQL
    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1

    - name: python-bandit with code annotations
      # You may pin to the exact commit or the version.
      # uses: ioggstream/bandit-report-artifacts@d706d74be4004d4300a56feca4b6ca98d70211ac
      uses: ioggstream/bandit-report-artifacts@v0.0.2

    # This is optional
    - name: Security check report artifacts
      uses: actions/upload-artifact@v1
      with:
        name: Security report
        path: output/security_report.txt

    #   #### ONLY USE THIS IF YOU WANT TO USE SWAGGER!!!! 
    #   ### Maybe in Even Better DevOps we have this
    # - name: 42Crunch REST API Static Security Testing
    #   # You may pin to the exact commit or the version.
    #   # uses: 42Crunch/api-security-audit-action@48f468ee3cbd6ef8e5d8307fba9177ac0f6b87b2
    #   # First create collection
    #   uses: 42Crunch/api-security-audit-action@v1
    #   with:
    #     # The API token to access 42Crunch Platform. Please create free account at https://platform.42crunch.com/register and follow hese steps to configure API_TOKEN https://docs.42crunch.com/latest/content/tasks/integrate_github_actions.htm
    #     api-token: "23982d54-8343-4507-99d5-0218c9d20130" # optional
    #     # A name for the API collection
    #     collection-name: "CI CODE" # optional, default is github
    #     # Minimum score for OpenAPI files.
    #     min-score: 75 # optional, default is 75
    #     # 
    #     #github-token: # optional, default is ${{ github.token }}
    #     # Upload results to Github Code Scanning
    #     upload-to-code-scanning: false # optional, default is false
    #     # Do not fail the action even if the faiures were detected in the API contract
    #     #ignore-failures: # optional, default is false


    ###Source Bolt is an application

    # - name: Heroku Review App Deployment Status
    #   # You may pin to the exact commit or the version.
    #   # uses: niteoweb/reviewapps-deploy-status@82f706f07b4acd9ebb031f1eac2bd9c0fd82f159
    #   uses: niteoweb/reviewapps-deploy-status@v1.4.0
    #   env:
    #        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #        HEROKU_AUTH_TOKEN: ${{ secrets.HEROKU_API_KEY }}
      
   

  staging-deploy:
   needs: build
   runs-on: ubuntu-latest
   environment: staging
   steps:
    - uses: actions/checkout@v2      
    - name: Deploy to Heroku - Staging Environment
      uses: akhileshns/heroku-deploy@v3.7.8 # This is the action
      with:
        heroku_email: "abuhijleh@abuhijleh.net"
        heroku_api_key: ${{secrets.HEROKU_API_KEY}}
        heroku_app_name: "pipeline-test-001" 
    - name: Heroku Build Logs
      #### SHOULD GIT THE LOGS IF IT FAILED
      if: ${{ failure() }}
      uses: mheap/github-action-heroku-logs@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        HEROKU_AUTH_TOKEN: ${{ secrets.HEROKU_API_KEY }}
  

  #### Run Penetration Test
  #### WE need to wait
  staging-pentest:
    needs: staging-deploy
    runs-on: ubuntu-latest
    steps:
      ####### SLEEP TILL THE APPLICATION IS DEPLOYED
      - name: Sleep for 2m
        uses: jakejarvis/wait-action@master
        with:
          time: '2m'
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.4.0
        with:
          ## THis should be Environment Variable not here.
          target: 'https://pipeline-test-001.herokuapp.com'

  Production:
   needs: staging-pentest
   runs-on: ubuntu-latest
   environment: production
   steps:
    - uses: actions/checkout@v2      
    - name: Deploy to Heroku - Production Environment
      uses: akhileshns/heroku-deploy@v3.7.8 # This is the action
      with:
        heroku_email: "abuhijleh@abuhijleh.net"
        heroku_api_key: ${{secrets.HEROKU_API_KEY}}
        heroku_app_name: "pipeline-production--001" 
    - name: Heroku Build Logs
      #### SHOULD GIT THE LOGS IF IT FAILED
      if: ${{ failure() }}
      uses: mheap/github-action-heroku-logs@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        HEROKU_AUTH_TOKEN: ${{ secrets.HEROKU_API_KEY }}   
 

  
  
#   name: Test and release

# # Fires on all incoming commits
# on: [push]

# jobs:

#   # Test
#   test:
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         python: [3.6, 3.7, 3.8]

#     steps:
#       - uses: actions/checkout@v2
#       - uses: actions/setup-python@v1
#         with:
#           python-version: ${{ matrix.python }}
#       - name: Install dependencies
#         run: pip install tox tox-gh-actions
#       - name: Run tests
#         run: tox --parallel
#         env:
#           TOX_PARALLEL_NO_SPINNER: 1
#       #Deploy to Heroku
#       #- uses: actions/checkout@v2
#       - name: Deploy Deploy to Heroku
#         uses: CDNievas/heroku-action@v1.0 # This is the action
#         with:
#           heroku_email: "abuhijleh@abuhijleh.net"
#           heroku_api_key: ${{secrets.HEROKU_API_KEY}}
#           heroku_app_name: "abuhijleh-first-django"          

          

#   # Create a new semantic release
#   #release:
#   #  needs: test
#   #  runs-on: ubuntu-latest
#   #  steps:
#   #    - uses: actions/checkout@v2
#   #   - uses: actions/setup-python@v1
#   #      with:
#    #       python-version: 3.8
#  #     - uses: cycjimmy/semantic-release-action@v2
#  #       with:
#  #         semantic_version: 17
#  #         extra_plugins: |
#  #           @semantic-release/exec@5
#  #       env:
#  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#  #         TWINE_USERNAME: __token__
#  #         TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
